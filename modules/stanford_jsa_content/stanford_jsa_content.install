<?php
/**
 * @file
 * Install functions for Stanford Jumpstart Academic Content module
 */

/**
 * Implements hook_install().
 */
function stanford_jsa_content_install() {
  //Events Importer Node
  //See https://drupal.org/node/622700 for documentation on creating Feeds programatically
  //only do this if we haven't done it before
  $stanford_jsa_content_node_stanford_events_importer = variable_get('stanford_jsa_content_node_stanford_events_importer');
  if (!isset($stanford_jsa_content_node_stanford_events_importer)) {
    //create a new node.
    $node = new stdClass();
    $node->type = 'stanford_event_importer';
    $node->status = 1;
    $node->language = LANGUAGE_NONE;
    $node->title = st("Lectures and Readings");
    $node->path = array('pathauto' => 1);
    $node->is_new = TRUE;
    //prepare the node
    node_object_prepare($node);
    $node->uid = 1;
    $node->feeds['FeedsHTTPFetcher']['source'] = "http://events.stanford.edu/xml/drupal/v2.php?category=2";
    $node->feeds['config'] = array('FeedsHTTPFetcher' => array('source' => 'http://events.stanford.edu/xml/drupal/v2.php?category=2'));
    //save the node
    node_save($node);

    // Ensure that importer gets saved. When run during installation profile the
    // source gets dropped. @todo: find out why.
    $source = feeds_source($node->type, $node->nid);
    $source->addConfig($node->feeds);
    $source->importer->fetcher->source_config['source'] = $node->feeds['FeedsHTTPFetcher']['source'];
    $source->save();

    //import the stuff
    while (FEEDS_BATCH_COMPLETE != feeds_source('stanford_event_importer', $node->nid)->import());

    //grab the nid
    $nid = $node->nid;
    //set a variable with the nid
    variable_set('stanford_jsa_content_node_stanford_events_importer', $nid);
  }
  //Course Importer Node
  //only do this if we haven't done it before
/*  $stanford_jsa_content_node_stanford_course_importer = variable_get('stanford_jsa_content_node_stanford_course_importer');
  if (!isset($stanford_jsa_content_node_stanford_course_importer)) {
    //create a new node.
    $node = new stdClass();
    $node->type = 'stanford_course_importer';
    $node->status = 1;
    $node->language = LANGUAGE_NONE;
    $node->title = st("Design Institute Classes");
    $node->path = array('pathauto' => 1);
    $node->is_new = TRUE;
    //prepare the node
    node_object_prepare($node);
    $node->uid = 1;
    $node->feeds['FeedsHTTPFetcher']['source'] = "http://explorecourses.stanford.edu/CourseSearch/search?view=xml-20130201&filter-coursestatus-Active=on&page=0&catalog=&q=Design+Institute+class";
    //save the node
    node_save($node);
    //import the stuff
    while (FEEDS_BATCH_COMPLETE != feeds_source('stanford_course_importer', $node->nid)->import());
    //grab the nid
    $nid = $node->nid;
    //set a variable with the nid
    variable_set('stanford_jsa_content_node_stanford_course_importer', $nid);
  }*/

  //Footer Contact block
  //only do this if we haven't done it before
  $stanford_jsa_content_bean_contact = variable_get('stanford_jsa_content_bean_contact');
  if (!isset($stanford_jsa_content_bean_contact)) {
    $bean = bean_create(array('type' => 'stanford_contact'));
    $bean->label = 'Jumpstart Footer Contact Block';
    $bean->title = 'Contact Us';
    $bean->delta = 'jumpstart-footer-contact-block';
    $bean->field_s_contact_address_line_1[LANGUAGE_NONE][0]['value'] = 'Building Name Room 555';
    $bean->field_s_contact_address_line_2[LANGUAGE_NONE][0]['value'] = 'Street Address';
    $bean->field_s_contact_city_state_zip[LANGUAGE_NONE][0]['value'] = 'Stanford, CA 94305';
    $bean->field_s_contact_email['und'][0]['email'] = 'sunetid@stanford.edu';
    $bean->field_s_contact_phone[LANGUAGE_NONE][0]['value'] = '650-725-5555';
    $bean->field_s_contact_link[LANGUAGE_NONE][0]['url'] = 'http://campus-map.stanford.edu';
    $bean->field_s_contact_link[LANGUAGE_NONE][0]['title'] = 'Campus Map';
    $bean->save();
    $bid = $bean->bid;
    variable_set('stanford_jsa_content_bean_contact', $bid);
  }

  // Nodes
  // News Item nodes
  $node_info = array(
    'name' => 'smith_lecture',
    'title' => 'Sample News: Smith Lecture',
    'path' => 'news/2013-sample-news-smith-lecture',
    'source_date' => '2013-08-14 00:00:00',
    'source_link_title' => 'Stanford Report',
    'source_link_url' => 'http://news.stanford.edu/sr/',
    'body' => 'smith_lecture.txt',
    'fc' => array(
      'filename' => 'professor_on_stairs.png',
      'credits' => '',
      'alt' => 'Professor lecturing',
      'source_info' => 'Sallie Images',
      'caption' => '',
    ),
  );
  stanford_jsa_content_s_news_item_node_create($node_info);

  $node_info = array(
    'name' => 'smith_conference',
    'title' => 'Sample News: Smith Conference',
    'path' => 'news/2013-sample-news-smith-conference',
    'source_date' => '2013-09-30 00:00:00',
    'source_link_title' => 'Stanford Report',
    'source_link_url' => 'http://news.stanford.edu/sr/',
    'body' => 'smith_conference.txt',
    'fc' => array(
      'filename' => 'engaged_group_computer.png',
      'credits' => '',
      'alt' => 'A group of people huddled around a computer screen',
      'source_info' => 'Sallie Images',
      'caption' => '',
    ),
  );
  stanford_jsa_content_s_news_item_node_create($node_info);

  // Stanford Page nodes
  $body = '404.php';
  $node_info = array(
    'name' => '404',
    'title' => 'Page Not Found',
    'path' => '404',
    'body' => $body,
  );
  stanford_jsa_content_s_page_node_create($node_info);

  // $node_info = array(
  //   'name' => 'academics_overview',
  //   'title' => 'Academics Overview',
  //   'path' => 'academics/academics-overview',
  //   'body' => 'academics_overview.txt',
  //   'fc' => array(
  //     'filename' => 'outdoor_classroom.png',
  //     'credits' => '',
  //     'alt' => 'Students holding class outdoors',
  //     'source_info' => 'Sallie Images',
  //     'caption' => '<p>Students meet for their course section outdoors on a nice day.</p>',
  //   ),
  // );
  // stanford_jsa_content_s_page_node_create($node_info);

  // $node_info = array(
  //   'name' => 'undergraduate_program',
  //   'title' => 'Undergraduate Program',
  //   'path' => 'academics/undergraduate-program',
  //   'body' => 'undergraduate_program.txt',
  //   'fc' => array(
  //     'filename' => 'undergrads_outside_meyer.png',
  //     'credits' => '',
  //     'alt' => 'Undergraduates studying outside Meyer library',
  //     'source_info' => 'Sallie Images',
  //     'caption' => '<p>Undergraduates studying outside Meyer.</p>',
  //   ),
  // );
  // stanford_jsa_content_s_page_node_create($node_info);

  // $node_info = array(
  //   'name' => 'graduate_programs',
  //   'title' => 'Graduate Programs',
  //   'path' => 'academics/graduate-programs',
  //   'body' => 'graduate_programs.txt',
  //   'fc' => array(
  //     'filename' => 'instructor_reading.png',
  //     'credits' => '',
  //     'alt' => 'Instructor reading aloud',
  //     'source_info' => 'Sallie Images',
  //     'caption' => '<p>An instructor reads aloud to a graduate symposium.</p>',
  //   ),
  // );
  // stanford_jsa_content_s_page_node_create($node_info);

  // $node_info = array(
  //   'name' => 'about_us',
  //   'title' => 'About Us',
  //   'path' => 'about/about-us',
  //   'body' => 'about_us.txt',
  //   'fc' => array(
  //     'filename' => 'arcade_bike.jpg',
  //     'credits' => '',
  //     'alt' => 'Arcade on the Quad',
  //     'source_info' => 'Sallie Images',
  //     'caption' => '<p>Arcade on the Quad with student walking a bike.</p>',
  //   ),
  // );
  // stanford_jsa_content_s_page_node_create($node_info);

  // $node_info = array(
  //   'name' => 'contact',
  //   'title' => 'Contact',
  //   'path' => 'about/contact',
  //   'body' => 'contact.txt',
  //   'fc' => array(
  //     'filename' => 'quad_palms.png',
  //     'credits' => '',
  //     'alt' => 'Stanford Quad on a sunny day',
  //     'source_info' => 'Sallie Images',
  //     'caption' => '',
  //   ),
  // );
  // stanford_jsa_content_s_page_node_create($node_info);

  // Stanford Person nodes
  $node_info = array(
    'name' => 'emily-jordan',
    'path' => 'people/emily-jordan',
    'title' => 'Emily Jordan',
    'body' => 'emily-jordan.txt',
    'type' => 'staff',
    'profile_pic' => array(
      'filename' => 'woman_at_desk.png',
      'alt' => 'Woman at desk',
    ),
    'first_name' => 'Emily',
    'last_name' => 'Jordan',
    'faculty_title' => 'Department Manager',
    'email' => 'sunetid@stanford.edu',
    'phone' => '650-555-1212',
    'fax' => '650-555-5555',
    'office_hours' => 'Fri 10:00-11:00am',
    'office_location' => '460-317',
    'staff_type' => 'Department Administrator',
  );
  stanford_jsa_content_s_person_node_create($node_info);

  $node_info = array(
    'name' => 'jacob-smith',
    'path' => 'people/jacob-smith',
    'title' => 'Jacob Smith',
    'body' => 'jacob-smith.txt',
    'link_title' => 'StanfordWho',
    'link_url' => 'http://stanfordwho.stanford.edu',
    'type' => 'faculty',
    'profile_pic' => array(
      'filename' => 'prof_with_books.png',
      'alt' => 'A librarian with books',
    ),
    'first_name' => 'Jacob',
    'last_name' => 'Smith',
    'faculty_title' => 'Professor of English',
    'education' => 'B.A., Stanford University, 1972',
    'email' => 'sunetid@stanford.edu',
    'phone' => '650-555-1212',
    'fax' => '650-555-5555',
    'office_hours' => 'Fri 10:00-11:00am and Tue 11:00-12:00pm',
    'office_location' => 'Bldg. 460, rm 318',
    'mailing_address' => '<p>550 Main Lane<br />
	Stanford, CA 94306</p>',
    'mail_code' => '5230',
    'faculty_type' => 'Professor',
  );
  stanford_jsa_content_s_person_node_create($node_info);

  $node_info = array(
    'name' => 'haley-jackson',
    'path' => 'people/haley-jackson',
    'title' => 'Haley Jackson',
    'body' => 'haley-jackson.txt',
    'link_title' => 'Web page',
    'link_url' => 'http://people.stanford.edu',
    'type' => 'student',
    'profile_pic' => array(
      'filename' => 'greenhouse_student.png',
      'alt' => 'Student in greenhouse',
    ),
    'first_name' => 'Haley',
    'last_name' => 'Jackson',
    'education' => 'B.A., Stanford University, 2012',
    'email' => 'sunetid@stanford.edu',
    'phone' => '650-555-1212',
    'fax' => '650-555-5555',
    'office_hours' => 'Fri 10:00-11:00am and Tue 11:00-12:00pm',
    'office_location' => 'Bldg. 460, rm 317',
    'mailing_address' => '<p>550 Main Lane<br />
	Stanford, CA 94306</p>',
    'mail_code' => '5230',
    'student_type' => 'Graduate Students',
    'cohort' => '2008-01-01 00:00:00',
    'diss_title' => '21st Century Slang Word Origins',
    'graduation_year' => '2015-01-01 00:00:00',
  );
  stanford_jsa_content_s_person_node_create($node_info);

  // Stanford Publication nodes
  $node_info = array(
    'name' => 'sample-publication-01',
    'title' => 'Sample Publication: Book Title',
    'path' => 'publications/sample-publication-book-title',
    'body' => 'sample-publication-01.txt',
    'year' => '2011-01-01 00:00:00',
    'author' => 'Marvin C. Farrell',
    'publisher' => 'Macmillan',
    'link_title' => 'Learn More at the Publisher\'s Website',
    'link_url' => 'http://www.macmillan.com/',
    'fc' => array(
      'filename' => 'quad_arch.png',
      'credits' => '',
      'alt' => 'Book cover of Sample Publication',
      'source_info' => 'Sallie Images',
      'caption' => '',
    ),
  );
  stanford_jsa_content_s_publication_node_create($node_info);

  $node_info = array(
    'name' => 'sample-publication-02',
    'title' => 'Sample Publication: Book Title Two',
    'path' => 'publications/sample-publication-book-title-two',
    'body' => 'sample-publication-02.txt',
    'year' => '2012-01-01 00:00:00',
    'author' => 'Cathy Wildling',
    'publisher' => 'Stanford University Press',
    'link_title' => 'Learn More at the Publisher\'s Website',
    'link_url' => 'http://www.sup.org/',
    'document' => 'blank_pdf.pdf',
    'fc' => array(
      'filename' => 'quad_columns1.png',
      'credits' => '',
      'alt' => 'Book cover of Sample Publication',
      'source_info' => 'Sallie Images',
      'caption' => '',
    ),
  );
  stanford_jsa_content_s_publication_node_create($node_info);

  // BEANs
  // Stanford Postcard BEANs
  $bean_info = array(
    'name' => 'jumpstart-home-page-about',
    'label' => 'Jumpstart Home Page About Block',
    'title' => 'About',
    'body' => 'about_block.txt',
    'link_title' => 'More About Us',
    'link_url' => 'about',
  );
  if (!bean_load_delta($bean_info['name'])) {
    stanford_jsa_content_s_postcard_bean_create($bean_info);
  }

  $bean_info = array(
    'name' => 'jumpstart-home-page-academics',
    'label' => 'Jumpstart Home Page Academics Block',
    'title' => 'Academic Programs',
    'body' => 'academic_programs_block.txt',
    'link_title' => '',
    'link_url' => '',
    'fc' => array(
      'filename' => 'oval_stanford_flowers.png',
      'credits' => '',
      'alt' => 'Stanford Oval flowers',
      'source_info' => 'Sallie Images',
      'caption' => '',
    ),
  );
  if (!bean_load_delta($bean_info['name'])) {
    stanford_jsa_content_s_postcard_bean_create($bean_info);
  }

  $bean_info = array(
    'name' => 'jumpstart-contact-us-postcard',
    'label' => 'Jumpstart Contact Us Postcard',
    'title' => 'Contact and Location',
    'body' => 'contact_block.txt',
    'link_title' => 'Contact Us',
    'link_url' => 'about/contact',
    'fc' => array(
      'filename' => 'jordan_hall_flowers.png',
      'credits' => '',
      'alt' => 'Jordan Hall with flowers in bloom',
      'source_info' => 'Sallie Images',
      'caption' => '',
    ),
  );

  if (!bean_load_delta($bean_info['name'])) {
    stanford_jsa_content_s_postcard_bean_create($bean_info);
  }

  $bean_info = array(
    'name' => 'jumpstart-featured-course',
    'label' => 'Jumpstart Featured Course',
    'title' => 'Featured Course',
    'body' => 'featured_course_block.txt',
    'link_title' => 'Add a link to the course here',
    'link_url' => 'courses',
    'fc' => array(
      'filename' => 'students_construction.png',
      'credits' => '',
      'alt' => 'Students building a house',
      'source_info' => 'Sallie Images',
      'caption' => '',
    ),
  );
  if (!bean_load_delta($bean_info['name'])) {
    stanford_jsa_content_s_postcard_bean_create($bean_info);
  }

  $bean_info = array(
    'name' => 'jumpstart-featured-event',
    'label' => 'Jumpstart Featured Event',
    'title' => 'Featured Event',
    'body' => 'featured_event_block.txt',
    'link_title' => 'Link to your featured event',
    'link_url' => 'events',
    'fc' => array(
      'filename' => 'graduation_balloons.png',
      'credits' => '',
      'alt' => 'Graduation balloons',
      'source_info' => 'Sallie Images',
      'caption' => '',
    ),
  );
  if (!bean_load_delta($bean_info['name'])) {
    stanford_jsa_content_s_postcard_bean_create($bean_info);
  }

  $bean_info = array(
    'name' => 'jumpstart-prospective-student',
    'label' => 'Jumpstart Prospective Student Sidebar Block',
    'title' => 'Prospective Student?',
    'body' => 'prospective_student_block.txt',
    'link_title' => 'Graduate Degrees',
    'link_url' => 'degree-programs/graduate-programs',
    'fc' => array(
      'filename' => 'students_speaking_classroom.png',
      'credits' => '',
      'alt' => 'Students speaking in a classroom',
      'source_info' => 'Sallie Images',
      'caption' => '',
    ),
  );
  if (!bean_load_delta($bean_info['name'])) {
    stanford_jsa_content_s_postcard_bean_create($bean_info);
  }

  $bean_info = array(
    'name' => 'jumpstart-why-i-teach',
    'label' => 'Jumpstart Why I Teach Block',
    'title' => 'Why I Teach',
    'body' => 'why_i_teach_block.txt',
    'link_title' => 'Add a link to the faculty member\'s profile page',
    'link_url' => 'people/faculty',
    'fc' => array(
      'filename' => 'alda_lecture.png',
      'credits' => '',
      'alt' => 'Faculty member giving a lecture',
      'source_info' => 'Sallie Images',
      'caption' => '',
    ),
  );
  if (!bean_load_delta($bean_info['name'])) {
    stanford_jsa_content_s_postcard_bean_create($bean_info);
  }

  // Stanford Banner BEAN
  $bean_info = array(
    'name' => 'jumpstart-homepage-banner-image',
    'label' => 'Jumpstart Home Page Banner Image',
    'title' => '',
    'fc' => array(
      'filename' => 'quad_palms_0.png',
      'credits' => '',
      'alt' => 'Image of the Stanford Main Quad and palm trees',
      'source_info' => 'Sallie Images',
      'caption' => '<h2>Welcome to your site!</h2>
<p>Edit this block to change the image and caption. Keep text this short! <a class="more-link" href="#">Example Link</a></p>',
    ),
  );
  if (!bean_load_delta($bean_info['name'])) {
    stanford_jsa_content_s_banner_bean_create($bean_info);
  }

  // Expire the registry and clear caches before continuing.
  // drupal_flush_all_caches();

  // Create redirects.
  // $redirects = array(
  //   'academics' => 'academics/academics-overview',
  //   'people' => 'people/faculty',
  //   'news' => 'news/recent-news',
  //   'events' => 'events/upcoming-events',
  //   'about' => 'about/about-us',
  // );

  // foreach ($redirects as $source => $dest) {
  //   $redirect = new stdClass();
  //   $source = drupal_lookup_path('source', $source);

  //   if (drupal_lookup_path('source', $dest)) {
  //     $dest = drupal_lookup_path('source', $dest);
  //   }

  //   // Check to see if redirect exists first.
  //   $found = redirect_load_by_source($source);
  //   if (!empty($found)) {
  //     // Redirect exists.
  //     continue;
  //   }

  //   module_invoke(
  //     'redirect',
  //     'object_prepare',
  //     $redirect,
  //     array(
  //       'source' => $source,
  //       'source_options' => array(),
  //       'redirect' => $dest,
  //       'redirect_options' => array(),
  //       'language' => LANGUAGE_NONE,
  //     )
  //   );

  //   if ($source !== $dest) {
  //     module_invoke('redirect', 'save', $redirect);
  //   }
  // }

}

 /**
  * Create a stanford_news_item node
  *
  * @param array $node_info multi-dimensional array containing the content of the node
  *
  */
 function stanford_jsa_content_s_news_item_node_create($node_info) {
  $content_editor_text_format = 'content_editor_text_format';
  $module_path = drupal_get_path('module', 'stanford_jsa_content');
  $name = $node_info['name'];
  $title = $node_info['title'];
  $path = $node_info['path'];
  $source_date = $node_info['source_date'];
  $source_link_title = $node_info['source_link_title'];
  $source_link_url = $node_info['source_link_url'];
  $body = $node_info['body'];
  $fc = isset($node_info['fc']) ? $node_info['fc'] : NULL;
  $node_exists = variable_get('stanford_jsa_content_node_' . $name);

  // Only do this if we haven't done it before.
  if (!isset($node_exists)) {
    // Create a new node.
    $node = (object) NULL;
    $node->type = 'stanford_news_item';
    $node->status = 1;
    $node->language = LANGUAGE_NONE;
    $node->title = st($title);
    $node->body[LANGUAGE_NONE][0]['format'] = $content_editor_text_format;
    $body = file_get_contents($module_path . '/content/' . $body);
    $node->body[LANGUAGE_NONE][0]['value'] = $body;
    $node->field_s_news_date[LANGUAGE_NONE][0]['value'] = $source_date;
    $node->field_s_news_source[LANGUAGE_NONE][0]['title'] = $source_link_title;
    $node->field_s_news_source[LANGUAGE_NONE][0]['url'] = $source_link_url;
    $node->path = array('pathauto' => 0, 'alias' => $path);
    $node->is_new = TRUE;

    // Prepare the node.
    node_object_prepare($node);
    $node->uid = 1;

    // Save the node.
    node_save($node);
    if (isset($fc)) {
      $filename = $fc['filename'];
      $filepath = drupal_realpath($module_path . '/content/' . $filename);
      $image = (object) array(
        'uid' => 1,
        'uri' => $filepath,
        'filemime' => file_get_mimetype($filepath),
        'status' => 1,
      );
      // Save the file to the root of the public files directory.
      $image = file_copy($image, 'public://');

      // Create and save field collection for node.
      $field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_s_image_info'));
      $field_collection_item->setHostEntity('node', $node);
      $field_collection_item->language = LANGUAGE_NONE;
      $field_collection_item->field_s_image_credits[LANGUAGE_NONE][0]['value'] = isset($fc['credits']) ? $fc['credits'] : '';
      $field_collection_item->field_s_image_image[LANGUAGE_NONE][0] = (array)$image;
      $field_collection_item->field_s_image_image[LANGUAGE_NONE][0]['alt'] = isset($fc['alt']) ? $fc['alt'] : '';
      $field_collection_item->field_s_image_source_info[LANGUAGE_NONE][0]['value'] = isset($fc['source_info']) ? $fc['source_info'] : '';
      $field_collection_item->field_s_image_caption[LANGUAGE_NONE][0]['format'] = $content_editor_text_format;
      $field_collection_item->field_s_image_caption[LANGUAGE_NONE][0]['value'] = isset($fc['caption']) ? $fc['caption'] : '';
      $field_collection_item->save();
    }

    // Grab the nid.
    $nid = $node->nid;
    // Set the variable with the node name and nid.
    variable_set('stanford_jsa_content_node_' . $name, $nid);
  }
 }

 /**
  * Create a stanford_page node
  *
  * @param array $node_info multi-dimensional array containing the content of the node
  *
  */
 function stanford_jsa_content_s_page_node_create($node_info) {
  $content_editor_text_format = 'content_editor_text_format';
  $module_path =  drupal_get_path('module', 'stanford_jsa_content');
  $name = $node_info['name'];
  $title = $node_info['title'];
  $path = $node_info['path'];
  $body = $node_info['body'];
  $fc = isset($node_info['fc']) ? $node_info['fc'] : NULL;
  $node_exists = variable_get('stanford_jsa_content_node_' . $name);
  //only do this if we haven't done it before
  if (!isset($node_exists)) {
    //create a new node
    $node = (object) NULL;
    $node->type = 'stanford_page';
    $node->status = 1;
    $node->language = LANGUAGE_NONE;
    $node->title = st($title);
    $node->body[LANGUAGE_NONE][0]['format'] = $content_editor_text_format;
    ob_start();
    include($module_path . '/content/' . $body);
    $body = ob_get_clean();
    $node->body[LANGUAGE_NONE][0]['value'] = $body;
    $node->path = array('pathauto' => 0, 'alias' => $path);
    $node->is_new = TRUE;
    //prepare the node
    node_object_prepare($node);
    $node->uid =1;
    //save the node
    node_save($node);
    if(isset($fc)) {
      $filename = $fc['filename'];
      $filepath = drupal_realpath($module_path . '/content/' . $filename);
      $image = (object) array(
        'uid' => 1,
        'uri' => $filepath,
        'filemime' => file_get_mimetype($filepath),
        'status' => 1,
      );
      // Save the file to the root of the public files directory.
      $image = file_copy($image, 'public://');
      // Create and save field collection for node
      $field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_s_image_info'));
      $field_collection_item->setHostEntity('node', $node);
      $field_collection_item->language = LANGUAGE_NONE;
      $field_collection_item->field_s_image_credits[LANGUAGE_NONE][0]['value'] = isset($fc['credits']) ? $fc['credits'] : '';
      $field_collection_item->field_s_image_image[LANGUAGE_NONE][0] = (array)$image;
      $field_collection_item->field_s_image_image[LANGUAGE_NONE][0]['alt'] = isset($fc['alt']) ? $fc['alt'] : '';
      $field_collection_item->field_s_image_source_info[LANGUAGE_NONE][0]['value'] = isset($fc['source_info']) ? $fc['source_info'] : '';
      $field_collection_item->field_s_image_caption[LANGUAGE_NONE][0]['format'] = $content_editor_text_format;
      $field_collection_item->field_s_image_caption[LANGUAGE_NONE][0]['value'] = isset($fc['caption']) ? $fc['caption'] : '';
      $field_collection_item->save();
    }
    //grab the nid
    $nid = $node->nid;
    //set the variable with the node name and nid
    variable_set('stanford_jsa_content_node_' . $name, $nid);
  }
 }

/**
  * Create a stanford_person node
  *
  * @param array $node_info multi-dimensional array containing the content of the node
  *
  * Lots of fields; here they are:
  * name (string)
  * path (string)
  * title (string)
  * body (filename)
  * link_title (string)
  * link_url (string)
  * type (string)
  * profile_pic = array('filename', 'alt')
  * first_name (string)
  * last_name (string)
  * faculty_title (string)
  * education (string)
  * email (string)
  * phone (string)
  * fax (string)
  * office_hours (string)
  * office_location (string)
  * mailing_address (string)
  * mail_code (string)
  * student_type (string)
  * cohort (date)
  * diss_title (string)
  * graduation_year (date)
  * faculty_type (string)
  * staff_type (string)
  *
  */
 function stanford_jsa_content_s_person_node_create($node_info) {
  $content_editor_text_format = 'content_editor_text_format';
  $module_path =  drupal_get_path('module', 'stanford_jsa_content');
  $name = $node_info['name'];
  $path = $node_info['path'];
  $body = $node_info['body'];
  $title = $node_info['title'];
  $link_title = $node_info['link_title'];
  $link_url = $node_info['link_url'];
  // if we've passed profile picture info in, set the variable; if not, set it to NULL
  $profile_pic = isset($node_info['profile_pic']) ? $node_info['profile_pic'] : NULL;
  $node_exists = variable_get('stanford_jsa_content_node_' . $name);
  //only do this if we haven't done it before
  if (!isset($node_exists)) {
    //create a new node
    $node = (object) NULL;
    $node->type = 'stanford_person';
    $node->status = 1;
    $node->language = LANGUAGE_NONE;
    $node->title = st($title);
    $node->body[LANGUAGE_NONE][0]['format'] = $content_editor_text_format;
    $body = file_get_contents($module_path . '/content/' . $body);
    $node->body[LANGUAGE_NONE][0]['value'] = $body;
    $node->path = array('pathauto' => 0, 'alias' => $path);
    // first and last name are required
    $node->field_s_person_first_name[LANGUAGE_NONE][0]['value'] = $node_info['first_name'];
    $node->field_s_person_last_name[LANGUAGE_NONE][0]['value'] = $node_info['last_name'];
    // set the following if they are set in $node_info
    $node->field_s_person_info_links[LANGUAGE_NONE][0]['title'] = isset($link_title) ? $link_title : '';
    $node->field_s_person_info_links[LANGUAGE_NONE][0]['url'] = isset($link_url) ? $link_url : '';
    $node->field_s_person_type[LANGUAGE_NONE][0]['value'] = isset($node_info['type']) ? $node_info['type'] : '';
    $node->field_s_person_faculty_title[LANGUAGE_NONE][0]['value'] = isset($node_info['faculty_title']) ? $node_info['faculty_title'] : '';
    $node->field_s_person_education[LANGUAGE_NONE][0]['value'] = isset($node_info['education']) ? $node_info['education'] : '';
    // contact info
    $node->field_s_person_email[LANGUAGE_NONE][0]['email'] = isset($node_info['email']) ? $node_info['email'] : '';
    $node->field_s_person_phone_display[LANGUAGE_NONE][0]['value'] = isset($node_info['phone']) ? $node_info['phone'] : '';
    $node->field_s_person_fax_display[LANGUAGE_NONE][0]['value'] = isset($node_info['fax']) ? $node_info['fax'] : '';
    $node->field_s_person_office_hours[LANGUAGE_NONE][0]['value'] = isset($node_info['office_hours']) ? $node_info['office_hours'] : '';
    $node->field_s_person_office_location[LANGUAGE_NONE][0]['value'] = isset($node_info['office_location']) ? $node_info['office_location'] : '';
    $node->field_s_person_mail_address_dspl[LANGUAGE_NONE][0]['value'] = isset($node_info['mailing_address']) ? $node_info['mailing_address'] : '';
    $node->field_s_person_mail_code[LANGUAGE_NONE][0]['value'] = isset($node_info['mail_code']) ? $node_info['mail_code'] : '';
    // student info
    if (isset($node_info['student_type'])){
      $term = taxonomy_get_term_by_name($node_info['student_type'], 'stanford_student_type');
      // only set it if we got a term array
      // not the most robust implementation (using key()) but should work, and we don't care all that much
      if (isset($term['tid'])) {
          $node->field_s_person_student_type[LANGUAGE_NONE][0]['tid'] = key($term);
      }

    }
    $node->field_s_person_cohort[LANGUAGE_NONE][0]['value'] = isset($node_info['cohort']) ? $node_info['cohort'] : NULL;
    $node->field_s_person_dissertatn_title[LANGUAGE_NONE][0]['value'] = isset($node_info['diss_title']) ? $node_info['diss_title'] : '';
    $node->field_s_person_graduation_year[LANGUAGE_NONE][0]['value'] = isset($node_info['graduation_year']) ? $node_info['graduation_year'] : NULL;
    // faculty info
    if (isset($node_info['faculty_type'])){
      $term = taxonomy_get_term_by_name($node_info['faculty_type'], 'stanford_faculty_type');
      //only set it if we got a term array
      if (isset($term['tid'])) {
          $node->field_s_person_faculty_type[LANGUAGE_NONE][0]['tid'] = key($term);
      }
    }
    // staff info
    if (isset($node_info['staff_type'])){
      $term = taxonomy_get_term_by_name($node_info['staff_type'], 'stanford_staff_type');
      //only set it if we got a term array
      if (isset($term['tid'])) {
        $node->field_s_person_staff_type[LANGUAGE_NONE][0]['tid'] = key($term);
      }
    }
    $node->is_new = TRUE;
    //prepare the node
    node_object_prepare($node);
    $node->uid =1;
    if(isset($profile_pic)) {
      $filename = $profile_pic['filename'];
      $filepath = drupal_realpath($module_path . '/content/' . $filename);
      $file = (object) array(
        'uid' => 1,
        'uri' => $filepath,
        'filemime' => file_get_mimetype($filepath),
        'status' => 1,
      );
      // Save the file to the root of the public files directory.
      $file = file_copy($file, 'public://');
      $node->field_s_person_profile_picture[LANGUAGE_NONE][0] = (array)$file;
      $node->field_s_person_profile_picture[LANGUAGE_NONE][0]['alt'] = $profile_pic['alt'];
    }
    //save the node
     node_save($node);
    //grab the nid
    $nid = $node->nid;
    //set the variable with the node name and nid
    variable_set('stanford_jsa_content_node_' . $name, $nid);
  }
 }

 /**
  * Create a stanford_publication node
  *
  * @param array $node_info multi-dimensional array containing the content of the node
  *
  */
 function stanford_jsa_content_s_publication_node_create($node_info) {
  $content_editor_text_format = 'content_editor_text_format';
  $module_path =  drupal_get_path('module', 'stanford_jsa_content');
  $name = $node_info['name'];
  $title = $node_info['title'];
  $path = $node_info['path'];
  $body = $node_info['body'];
  $year = $node_info['year'];
  $author = $node_info['author'];
  $publisher = $node_info['publisher'];
  $link_title = $node_info['link_title'];
  $link_url = $node_info['link_url'];
  // if we've passed a document path in, set the variable; if not, set it to NULL
  $document = isset($node_info['document']) ? $node_info['document'] : NULL;
  // if we've passed a field collection array in, set the variable; if not, set it to NULL
  $fc = isset($node_info['fc']) ? $node_info['fc'] : NULL;
  $node_exists = variable_get('stanford_jsa_content_node_' . $name);
  //only do this if we haven't done it before
  if (!isset($node_exists)) {
    //create a new node
    $node = (object) NULL;
    $node->type = 'stanford_publication';
    $node->status = 1;
    $node->language = LANGUAGE_NONE;
    $node->title = st($title);
    $node->body[LANGUAGE_NONE][0]['format'] = $content_editor_text_format;
    $body = file_get_contents($module_path . '/content/' . $body);
    $node->body[LANGUAGE_NONE][0]['value'] = $body;
    $node->path = array('pathauto' => 0, 'alias' => $path);
    $node->field_s_publication_year[LANGUAGE_NONE][0]['value'] = $year;
    $node->field_s_pub_author[LANGUAGE_NONE][0]['value'] = $author;
    $node->field_s_pub_publisher[LANGUAGE_NONE][0]['value'] = $publisher;
    $node->field_s_pub_link[LANGUAGE_NONE][0]['title'] = $link_title;
    $node->field_s_pub_link[LANGUAGE_NONE][0]['url'] = $link_url;
    $node->is_new = TRUE;
    //prepare the node
    node_object_prepare($node);
    $node->uid =1;
    if(isset($document)) {
      $filename = $document;
      $filepath = drupal_realpath($module_path . '/content/' . $filename);
      $file = (object) array(
        'uid' => 1,
        'uri' => $filepath,
        'filemime' => file_get_mimetype($filepath),
        'status' => 1,
      );
      // Save the file to the root of the public files directory.
      $file = file_copy($file, 'public://');
      $node->field_s_pub_document[LANGUAGE_NONE][0] = (array)$file;
      $node->field_s_pub_document[LANGUAGE_NONE][0]['display'] = 1;
      //hardcoding this. Does not need to be variable
      $node->field_s_pub_document[LANGUAGE_NONE][0]['description'] = 'Download a sample chapter';
    }
    //save the node
     node_save($node);
    if(isset($fc)) {
      $filename = $fc['filename'];
      $filepath = drupal_realpath($module_path . '/content/' . $filename);
      $image = (object) array(
        'uid' => 1,
        'uri' => $filepath,
        'filemime' => file_get_mimetype($filepath),
        'status' => 1,
      );
      // Save the file to the root of the public files directory.
      $image = file_copy($image, 'public://');
      // Create and save field collection for node
      $field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_s_image_info'));
      $field_collection_item->setHostEntity('node', $node);
      $field_collection_item->language = LANGUAGE_NONE;
      $field_collection_item->field_s_image_credits[LANGUAGE_NONE][0]['value'] = isset($fc['credits']) ? $fc['credits'] : '';
      $field_collection_item->field_s_image_image[LANGUAGE_NONE][0] = (array)$image;
      $field_collection_item->field_s_image_image[LANGUAGE_NONE][0]['alt'] = isset($fc['alt']) ? $fc['alt'] : '';
      $field_collection_item->field_s_image_source_info[LANGUAGE_NONE][0]['value'] = isset($fc['source_info']) ? $fc['source_info'] : '';
      $field_collection_item->field_s_image_caption[LANGUAGE_NONE][0]['format'] = $content_editor_text_format;
      $field_collection_item->field_s_image_caption[LANGUAGE_NONE][0]['value'] = isset($fc['caption']) ? $fc['caption'] : '';
      $field_collection_item->save();
    }
    //grab the nid
    $nid = $node->nid;
    //set the variable with the node name and nid
    variable_set('stanford_jsa_content_node_' . $name, $nid);
  }
 }

 /**
  * Create a Stanford Postcard BEAN
  *
  * @param array $bean_info multi-dimensional array containing the content of the BEAN
  *
  */
 function stanford_jsa_content_s_postcard_bean_create($bean_info) {
  $content_editor_text_format = 'content_editor_text_format';
  $module_path =  drupal_get_path('module', 'stanford_jsa_content');
  $name = $bean_info['name'];
  $label = $bean_info['label'];
  $title = $bean_info['title'];
  $body = $bean_info['body'];
  $link_title = $bean_info['link_title'];
  $link_url = $bean_info['link_url'];
  $fc = isset($bean_info['fc']) ? $bean_info['fc'] : NULL;
  $bean_exists = variable_get('stanford_jsa_content_bean_' . $name);
  //only do this if we haven't done it before
  if (!isset($bean_exists)) {
    $bean = bean_create(array('type' => 'stanford_postcard'));
    $bean->label = $label;
    $bean->delta = str_replace('_', '-', $name);
    $bean->title = st($title);
    $body = file_get_contents($module_path . '/content/' . $body);
    $bean->field_s_postcard_body[LANGUAGE_NONE][0] = array(
      'value' => $body,
      'format' => $content_editor_text_format,
    );
    $bean->field_s_postcard_link[LANGUAGE_NONE][0]['title'] = $link_title;
    $bean->field_s_postcard_link[LANGUAGE_NONE][0]['url'] = $link_url;
    $bean->save();
    if(isset($fc)) {
      $filename = $fc['filename'];
      $filepath = drupal_realpath($module_path . '/content/' . $filename);
      $image = (object) array(
        'uid' => 1,
        'uri' => $filepath,
        'filemime' => file_get_mimetype($filepath),
        'status' => 1,
      );
      // Save the file to the root of the public files directory.
      $image = file_copy($image, 'public://');
      // Create and save field collection for BEAN
      $field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_s_image_info'));
      $field_collection_item->setHostEntity('bean', $bean);
      $field_collection_item->language = LANGUAGE_NONE;
      $field_collection_item->field_s_image_credits[LANGUAGE_NONE][0]['value'] = isset($fc['credits']) ? $fc['credits'] : '';
      $field_collection_item->field_s_image_image[LANGUAGE_NONE][0] = (array)$image;
      $field_collection_item->field_s_image_image[LANGUAGE_NONE][0]['alt'] = isset($fc['alt']) ? $fc['alt'] : '';
      $field_collection_item->field_s_image_source_info[LANGUAGE_NONE][0]['value'] = isset($fc['source_info']) ? $fc['source_info'] : '';
      $field_collection_item->field_s_image_caption[LANGUAGE_NONE][0]['format'] = $content_editor_text_format;
      $field_collection_item->field_s_image_caption[LANGUAGE_NONE][0]['value'] = isset($fc['caption']) ? $fc['caption'] : '';
      $field_collection_item->save();
    }
    $bid = $bean->bid;
    variable_set('stanford_jsa_content_bean_' . $name, $bid);
  }
 }

 /**
  * Create a Stanford Banner BEAN
  *
  * @param array $bean_info multi-dimensional array containing the content of the BEAN
  *
  */
 function stanford_jsa_content_s_banner_bean_create($bean_info) {
  $content_editor_text_format = 'content_editor_text_format';
  $module_path =  drupal_get_path('module', 'stanford_jsa_content');
  $name = $bean_info['name'];
  $label = $bean_info['label'];
  $title = $bean_info['title'];
  $fc = isset($bean_info['fc']) ? $bean_info['fc'] : NULL;
  $bean_exists = variable_get('stanford_jsa_content_bean_' . $name);
  //only do this if we haven't done it before
  if (!isset($bean_exists)) {
    $bean = bean_create(array('type' => 'stanford_banner'));
    $bean->label = $label;
    $bean->delta = str_replace('_', '-', $name);
    $bean->title = st($title);
    $bean->save();
    if(isset($fc)) {
      $filename = $fc['filename'];
      $filepath = drupal_realpath($module_path . '/content/' . $filename);
      $image = (object) array(
        'uid' => 1,
        'uri' => $filepath,
        'filemime' => file_get_mimetype($filepath),
        'status' => 1,
      );
      // Save the file to the root of the public files directory.
      $image = file_copy($image, 'public://');
      // Create and save field collection for BEAN
      $field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_s_image_info'));
      $field_collection_item->setHostEntity('bean', $bean);
      $field_collection_item->language = LANGUAGE_NONE;
      $field_collection_item->field_s_image_credits[LANGUAGE_NONE][0]['value'] = isset($fc['credits']) ? $fc['credits'] : '';
      $field_collection_item->field_s_image_image[LANGUAGE_NONE][0] = (array)$image;
      $field_collection_item->field_s_image_image[LANGUAGE_NONE][0]['alt'] = isset($fc['alt']) ? $fc['alt'] : '';
      $field_collection_item->field_s_image_source_info[LANGUAGE_NONE][0]['value'] = isset($fc['source_info']) ? $fc['source_info'] : '';
      $field_collection_item->field_s_image_caption[LANGUAGE_NONE][0]['format'] = $content_editor_text_format;
      $field_collection_item->field_s_image_caption[LANGUAGE_NONE][0]['value'] = isset($fc['caption']) ? $fc['caption'] : '';
      $field_collection_item->save();
    }
    $bid = $bean->bid;
    variable_set('stanford_jsa_content_bean_' . $name, $bid);
  }

 }

 /**
 * Implements hook_uninstall().
 */
function stanford_jsa_content_uninstall() {
  //undo that voodoo that we did do
  //don't delete nodes, as we have no idea what the user did to them
  // Get module variables
  global $conf;
  foreach (array_keys($conf) as $key) {
    // Find variables that have the module prefix
    // Stolen from openlayers
    if (strpos($key, 'stanford_jsa_content_') === 0) {
      variable_del($key);
    }
  }
}
